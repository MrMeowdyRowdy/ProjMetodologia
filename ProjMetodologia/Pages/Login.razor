@using System.Net.Http.Json
@using Data
@using System.Text
@using System.Text.Json

@page "/"
@layout LoginLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject SharedStateService SharedState

<div class="card sign-up-card">
    <div class="flex-container">
        <div class="left-column">
            <div class="sign-up-text">
                <h2>Login</h2>
                <form class="sign-up-form" onsubmit="@(async () => { await GetUser(); })">
                    <label>Usuario</label>
                    <input @bind="user.Username" class="form-control" placeholder="XXXX" />
                    <label>Contraseña</label>
                    <input @bind="user.Password" class="form-control" type="password" placeholder="XXXXX" />
                    <button type="submit" class="btn submit-btn" style="@(loginSuccessful ? "display: none;" : "")">Login</button>
                </form>
                <form class="sign-up-form" onsubmit="@(async () => { await GetUser(); await GetEmisorData();})">
                    <div class="mb-3">
                        @if (apiResponse != null)
                        {
                            if (apiResponse[0].OBSERVACION.Equals("INGRESO EXITOSO"))
                            {
                                @if (showDropdown)
                                {
                                    <div class="mb-3">
                                        <label class="mb-3">Emisor</label>
                                        <select @bind="selectedEmisor" class="form-control">
                                            <option value="">Seleccione un emisor</option>
                                            @foreach (var emisor in apiResponseE)
                                            {
                                                <option value="@emisor.Codigo">@emisor.NombreEmisor</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="container; d-inline-block" style="display: flex; justify-content: center;">
                                        <button type="submit" @onclick="Validate" class="btn submit-btn">Continuar</button>
                                        <div class="popup" style="@(showPopup ? "display: block;" : "display: none;")">
                                            <div class="card success-card">
                                                <div class="container">
                                                    <img src="Images/icon-success.svg" alt="Error" />
                                                    <h2>Error en el emisor</h2>
                                                </div>
                                                <p>Has seleccionado incorrectamente el emisor, te recomendamos hablar con tu administrador para confirmar el emisor que desear encontrar.
                                                    <br> <br><strong>NOTA:</strong> Debes hacer click en Try again para intentar nuevamente.
                                                </p>
                                                <button @onclick="ClosePopup" class="btn dismiss-btn">Try again</button>
                                            </div>
                                        </div>

                                        <button @onclick="LimpiarCampos" class="btn submit-btn">Cancelar</button>
                                    </div>

                                    <div class="mb-3">
                                        <p class="text-success">@resultado</p>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-danger">@apiResponse[0].OBSERVACION</p>

                            }
                        }
                        else
                        {
                            <p class="text-danger">@mensaje</p>
                        }
                    </div>
                </form>
            </div>
        </div>
        <div class="right-column">
                <img class="sign-up-img"
                     src="./Images/illustration-sign-up-desktop.svg"
                     alt="" />
        </div>
    </div>
</div>

@code {
    private UserDto user = new UserDto();
    private User[] apiResponse;
    private List<Emisor> apiResponseE = new List<Emisor>();
    private int selectedEmisor;
    private bool showDropdown = false;
    private string resultado, mensaje;
    private bool loginSuccessful = false;
    private bool showPopup = false;

    private async Task GetUser()
    {
        await GetUserData();
        if (apiResponse != null)
        {
            await GetEmisorData();
            showDropdown = true;
            loginSuccessful = true; // Actualiza la variable de estado
        }
    }

    private async Task GetUserData()
    {
        var apiName = $"api/Usuarios?usuario={user.Username}&password={user.Password}";

        try
        {
            apiResponse = await Http.GetFromJsonAsync<User[]>(apiName);
            mensaje = apiResponse[0].OBSERVACION;

            if (apiResponse != null && apiResponse[0].OBSERVACION.Equals("INGRESO EXITOSO"))
            {
                await GetEmisorData();
                showDropdown = true;
                loginSuccessful = true;
            }
            else
            {
                loginSuccessful = false; // Agrega esta línea
                LimpiarCampos();
            }
        }
        catch (HttpRequestException e)
        {
            mensaje = "FALLO EN EL ACCESO";
            apiResponse = null;
            loginSuccessful = false; // Agrega esta línea
            LimpiarCampos();
        }
        catch (Exception e)
        {
            mensaje = "FALLO EN EL ACCESO";
            apiResponse = null;
            loginSuccessful = false; // Agrega esta línea
            LimpiarCampos();
        }
    }

    private async Task GetEmisorData()
{
    var apiEmisor = "api/Varios/GetEmisor";

    try
    {
        apiResponseE = await Http.GetFromJsonAsync<List<Emisor>>(apiEmisor);
        if (apiResponse != null && apiResponse.Length > 0)
        {
            selectedEmisor = apiResponse[0]?.Emisor ?? 0;
        }
        else
        {
            selectedEmisor = 0; // Asignar un valor predeterminado en caso de que apiResponse sea nulo o no contenga elementos
        }
    }
    catch (HttpRequestException e)
    {
        Console.WriteLine($"Error al obtener datos del emisor: {e.Message}");
    }
}


    private void Validate()
    {
        if (loginSuccessful && selectedEmisor == apiResponse[0].Emisor)
        {
            resultado = "Access";
            NavigationManager.NavigateTo("/Index");
            SharedState.CodEmisor = selectedEmisor;
            showPopup = false;
        }
        else
        {
            resultado = "";
            showPopup = true;
        }
    }

    private void ClosePopup()
    {
        showPopup = false;
    }

    private void LimpiarCampos()
    {
        apiResponse = null;
        user.Username = string.Empty;
        user.Password = string.Empty;
        selectedEmisor = 0;
        resultado = string.Empty;
        showDropdown = false;
        mensaje = string.Empty;
        loginSuccessful = false;
    }

}
