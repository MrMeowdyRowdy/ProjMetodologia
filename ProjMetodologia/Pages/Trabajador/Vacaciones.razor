@using System.Net.Http.Json
@using Data
@using System.Text
@using System.Text.Json
@using Data.Trabajador;

@page "/VacacionesTrabajador"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h3>Periodo de vacaciones</h3>

@if (vacacionesTrabajador != null)
{
    if (isMobile)
    {
        @foreach (var atributo in vacacionesTrabajador)
        {
            <div class="mobile-table-row">
                <div class="mobile-table-cell"><strong>Código:</strong> @atributo.Codigo</div>
                <div class="mobile-table-cell"><strong>Descripción:</strong> @atributo.Descripcion</div>
            </div>
        }
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Codigo</th>
                    <th>Descripcion</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var atributo in vacacionesTrabajador)
                {
                    <tr>
                        <td>@atributo.Codigo</td>
                        <td>@atributo.Descripcion</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    private List<AtributoTrabajador> vacacionesTrabajador = new List<AtributoTrabajador>();
    private bool isMobile;
    private bool isLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isLoaded)
        {
            isMobile = await JSRuntime.InvokeAsync<bool>("isMobileDevice");
            isLoaded = true; // Asegurarse de que no se vuelva a cargar
            StateHasChanged(); // Esto notificará a Blazor que debe volver a renderizar el componente
        }
    }
    private async Task GetTrabajadorData()
    {
        var apiName = $"api/Varios/PeriodoVacaciones";

        try
        {
            vacacionesTrabajador = await Http.GetFromJsonAsync<List<AtributoTrabajador>>(apiName);
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Error al obtener datos del usuario: {e.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetTrabajadorData();
    }
}
